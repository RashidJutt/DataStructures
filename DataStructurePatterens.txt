Data Structure Patterens.

Prefix Sum: 
Precomputed accumulated sum till index i. 
Used to answer subarrays queries when we need portion of array accourding to required condition we first think in prefix sum direction. 
We efficiently stored precomputed sums and then used them with mathical equation to identify required portions. 
We build prefixSum data with O(n) and Query with O(1) complexity. 
When we have to calculate length we start with sum[0]=-1; 
When we have to calculate number of subarrays then we strart with sum[0]=1;

Example Problems: 
Leet code 303: Range Sum Query â€“ Immutable
Prefix sum extentions: 
Prefix with HashMap. 
We combile Prefix sum with Hashmap we store computed sum along with index for frequescies accourding to problem and used that data to 
identify required subarrays.
When we have to calculate number of subarrays then we store sum count as value when we have to find max length then we store index as value. 
Example Problems: 
Leet Code 560 Subarray sum equal to k. 
Leet Code 1248 Count Number of nice sub arrays. sum of odd numbers - k already exist then its subarray that has k odd numbers.
LC 930: Binary Subarrays With Sum
LC 437: Path Sum III (tree version of subarray sum = k)
Key to solve path sum problem is that we have to use depth first search and remove sums on end of path. 
we store sums in same way and use recursion to treverse in tree and clean sums dictionary when one path is completed. 

2D Prefix Sum. 
We first compute prefix sum of complete metrix that is if we are at row 1 and col 1 then sum of row 0, row 1, col 0, col 1 is prefix at 1,1.
we have formula to calculate prefix is matrix[r][c] + top + left- diagnal.

then we compute Region sum with formuls , Prefix(r2,c2) - Prefix Sum (r1-1,c2) - Prefix Sum (r2,c1-1) + Prefix Sum ( r1-1,c1-1);

using two dimential array is faster then dictionary and using jagged array is faster then two dimentional array. 
we can also calculate prefix sum with calculating row sum method. previous row current row matrix row and we calculate sum by combining previous row sum + current row sum 

Prefix and Sufix. we calculated from left to right and right to left then perform operation on it 
Key here is that we not create seperate array for sufix we just store sufix sum in variable and use it. 
We Start with 1 on first index of prefix or sufix and multiply next index with previous one and after calculation prefix and sufix we multiply them to get product sum with out self.
Example 238 product of array except self. 




 
